---
openapi: 3.0.3
info:
  title: Unlock ChatBot - OpenAPI 3.0
  description: Здесь представлена схема обращения к боту
  contact:
    email: summedjesters@gmail.com
  version: 1.0.0
servers:
- url: https://unlock.sumjest.ru/api/
tags:
- name: Broadcast
  description: Broadcast methods
- name: Update
  description: Update methods
- name: User
  description: User's methods
- name: Log
  description: Work with bot logs
paths:
  /sendmessage:
    post:
      summary: Send message to user
      description: Send message to user
      operationId: sendmessage
      requestBody:
        description: Send message to user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageSentResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/id:
    get:
      tags:
      - User
      summary: Get user-id
      description: Get user id by telegram's chat id
      operationId: userid
      parameters:
      - name: chat_id
        in: query
        description: User's chat id
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/UserIdRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/chat-id:
    get:
      tags:
      - User
      summary: Get chat_id
      description: Get telegram's chat id by user id
      operationId: chatid
      parameters:
      - name: user_id
        in: query
        description: User's id
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/UserChatIdRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserChatIdResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /logs:
    get:
      tags:
      - Log
      summary: Log files list
      description: Get bot log files list
      operationId: logs
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogsResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /logs/{filename}:
    get:
      tags:
      - Log
      summary: Specific log file
      description: Get specific bot log file
      operationId: log
      parameters:
      - name: filename
        in: path
        description: Log filename
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: log-2023-07-16
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/validate:
    get:
      tags:
      - User
      summary: Validate user
      description: Get validate status of user init data
      operationId: uservalidate
      parameters:
      - name: auth
        in: query
        description: Init data from telegram web app
        required: true
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/UserValidateRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserValidateResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /message/publish:
    post:
      tags:
      - Broadcast
      summary: Send message to users
      description: "Send message to users. Leave \"chat_ids\" empty, if want to broadcast to all users."
      operationId: message_publish
      requestBody:
        description: Send message to user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastMessageRequest'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastMessageResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /vote/publish:
    post:
      tags:
      - Broadcast
      summary: Start vote
      description: bla bla bla
      operationId: vote_publish
      requestBody:
        description: Send vote
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastVoteRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastVoteResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /question/publish:
    post:
      tags:
      - Broadcast
      summary: Start question
      description: bla bla bla
      operationId: question_publish
      requestBody:
        description: Send question
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastQuestionRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastQuestionResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /registration/publish:
    post:
      tags:
      - Broadcast
      summary: Start event registration
      description: bla bla bla
      operationId: registration_publish
      requestBody:
        description: Send registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BroadcastRegistrationRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BroadcastRegistrationResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /registration/update:
    post:
      tags:
      - Update
      summary: Update event registration message
      description: bla bla bla
      operationId: registration_update
      requestBody:
        description: Update registration
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRegistrationRequest'
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateRegistrationResponse'
        "400":
          description: Request Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    ErrorResponse:
      required:
      - reason
      type: object
      properties:
        reason:
          type: string
          example: Non-json data
    SendMessageRequest:
      required:
      - message
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          format: int64
          example: 123
        message:
          type: string
          example: Hello world!
    BroadcastMessageRequest:
      required:
      - message_id
      - message_text
      type: object
      properties:
        message_id:
          type: integer
          format: int64
          example: 0
        message_text:
          type: string
          example: Hello world!
    BroadcastMessageResponse:
      required:
      - message_id
      type: object
      properties:
        message_id:
          type: integer
          format: int64
          example: 0
    MessageSentResponse:
      required:
      - message
      - message_id
      type: object
      properties:
        message:
          type: string
          example: Hello world!
        message_id:
          type: integer
          format: int64
          example: 1
    BroadcastVoteRequest:
      required:
      - options
      - vote_id
      - vote_text
      type: object
      properties:
        vote_id:
          type: integer
          format: int64
          example: 0
        vote_text:
          type: string
          example: Which option?
        options:
          type: array
          example:
          - option_id: 0
            option_text: string
          items:
            $ref: '#/components/schemas/Option'
    BroadcastVoteResponse:
      required:
      - vote_id
      type: object
      properties:
        vote_id:
          type: integer
          format: int64
          example: 0
    BroadcastQuestionRequest:
      required:
      - question_id
      - question_text
      type: object
      properties:
        question_id:
          type: integer
          format: int64
          example: 0
        question_text:
          type: string
          example: string
    BroadcastQuestionResponse:
      required:
      - question_id
      type: object
      properties:
        question_id:
          type: integer
          example: 0
    Option:
      required:
      - option_id
      - option_text
      type: object
      properties:
        option_id:
          type: integer
          format: int64
          example: 0
        option_text:
          type: string
          example: First option
    BroadcastRegistrationRequest:
      required:
      - options
      - registration_id
      - registration_text
      type: object
      properties:
        registration_id:
          type: integer
          format: int64
          example: 0
        registration_text:
          type: string
          example: string
        options:
          type: array
          example:
          - option_id: 0
            option_text: string
          items:
            $ref: '#/components/schemas/Option'
    UpdateRegistrationRequest:
      required:
      - options
      - registration_id
      - registration_text
      type: object
      properties:
        registration_id:
          type: integer
          format: int64
          example: 0
        registration_text:
          type: string
          example: string
        options:
          type: array
          example:
          - option_id: 0
            option_text: string
          items:
            $ref: '#/components/schemas/Option'
    BroadcastRegistrationResponse:
      required:
      - options
      - registration_id
      - registration_text
      type: object
      properties:
        registration_id:
          type: integer
          example: 0
    UpdateRegistrationResponse:
      required:
      - registration_id
      type: object
      properties:
        registration_id:
          type: integer
          example: 0
    UserIdResponse:
      required:
      - user_id
      type: object
      properties:
        user_id:
          type: integer
          example: 13
    UserChatIdResponse:
      required:
      - chat_id
      type: object
      properties:
        chat_id:
          type: integer
          example: 90284375
    UserIdRequest:
      type: integer
      example: 90284375
    UserChatIdRequest:
      type: integer
      example: 1
    UserValidateRequest:
      type: string
      example: query_id=AAGcqlFKAAAAAJyqUUp6-Y62&user=%7B%22id%22%3A1246866076%2C%22first_name%22%3A%22Dante%22%2C%22last_name%22%3A%22%22%2C%22username%22%3A%22S_User%22%2C%22language_code%22%3A%22en%22%7D&auth_date=1651689536&hash=de7f6b26aadbd667a36d76d91969ecf6ffec70ffaa40b3e98d20555e2406bfbb
    UserValidateResponse:
      required:
      - chat_id
      - valid
      type: object
      properties:
        valid:
          type: boolean
          example: true
        chat_id:
          type: integer
          example: 12387128
    LogsResponse:
      required:
      - logs
      type: object
      properties:
        logs:
          type: array
          example:
          - log-2023-07-16
          - log-2023-07-14
          items:
            type: string
